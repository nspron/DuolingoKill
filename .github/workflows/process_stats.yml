name: Process Device Stats

on:
  issues:
    types: [opened]

jobs:
  process-device-stats:
    if: contains(github.event.issue.labels.*.name, 'device_stats')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write  # 需要增加issues的write权限才能关闭issue
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up jq
        run: sudo apt-get install -y jq

      - name: Process stats data
        id: process-stats
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -eo pipefail

          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory /github/workspace

          # Extract and validate issue data
          TITLE="${{ github.event.issue.title }}"
          BODY=$(echo '${{ toJson(github.event.issue.body) }}' | jq -r '.')

          # Validate title format
          if ! [[ "$TITLE" =~ ^DeviceStats ]]; then
            echo "::error::无效的issue标题格式: $TITLE"
            exit 1
          fi

          # Parse JSON data with error handling
          parse_field() {
            local field_name="$1"
            local value
            if ! value=$(echo "$BODY" | jq -r ".${field_name}"); then
              echo "::error::解析字段失败: ${field_name}"
              exit 1
            fi
            if [[ "$value" == "null" ]]; then
              value=""
            fi
            echo "$value"
          }

          # Extract all fields
          DEVICE_ID=$(parse_field "device_id")
          DATE=$(parse_field "date")
          OPEN_COUNT=$(parse_field "open_count")
          REPORT_TIME=$(parse_field "report_time")
          DEVICE_MODEL=$(parse_field "device_model")
          ANDROID_VERSION=$(parse_field "android_version")
          MANUFACTURER=$(parse_field "manufacturer")
          SDK_VERSION=$(parse_field "sdk_version")
          VERSION=$(parse_field "version")
          IP_ADDRESS=$(parse_field "ip_address")
          IP_TYPE=$(parse_field "ip_type")
          COUNTRY=$(parse_field "country_name")
          COUNTRY_CODE=$(parse_field "country_code")
          REGION=$(parse_field "region_name")
          REGION_CODE=$(parse_field "region_code")
          CITY=$(parse_field "city")
          TIMEZONE=$(parse_field "timezone_id")
          CURRENT_TIME=$(parse_field "current_time")
          ISP=$(parse_field "isp")

          # Validate required fields
          REQUIRED_FIELDS=("$DEVICE_ID" "$DATE" "$OPEN_COUNT")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if [[ -z "$field" ]]; then
              echo "::error::缺少必填字段: $field"
              exit 1
            fi
          done

          # Prepare CSV directory and file
          CSV_DIR="stats"
          CSV_FILE="${CSV_DIR}/device_stats.csv"
          mkdir -p "$CSV_DIR"

          # Create CSV header if file doesn't exist
          if [ ! -f "$CSV_FILE" ]; then
            echo "date,device_id,open_count,report_time,device_model,android_version,manufacturer,sdk_version,version,ip_address,ip_type,country_name,country_code,region_name,region_code,city,timezone_id,current_time,isp" > "$CSV_FILE"
          fi

          # Process CSV data
          TEMP_FILE=$(mktemp)
          {
            # Keep header
            head -n 1 "$CSV_FILE"
            
            # Filter out existing entry for this device (if any)
            awk -F, -v device_id="$DEVICE_ID" '
              NR > 1 && $2 != "\""device_id"\"" { print }
            ' "$CSV_FILE"
            
            # Add new record with all fields
            echo "\"$DATE\",\"$DEVICE_ID\",$OPEN_COUNT,\"$REPORT_TIME\",\"$DEVICE_MODEL\",\"$ANDROID_VERSION\",\"$MANUFACTURER\",$SDK_VERSION,\"$VERSION\",\"$IP_ADDRESS\",\"$IP_TYPE\",\"$COUNTRY\",\"$COUNTRY_CODE\",\"$REGION\",\"$REGION_CODE\",\"$CITY\",\"$TIMEZONE\",\"$CURRENT_TIME\",\"$ISP\""
          } > "$TEMP_FILE" && mv "$TEMP_FILE" "$CSV_FILE"

          # Commit changes
          git add "$CSV_FILE"
          if ! git diff-index --quiet HEAD --; then
            git commit -m "📊 更新设备统计: $DEVICE_ID"
            git push origin HEAD:main
            echo "::notice::已更新设备 $DEVICE_ID 的统计数据"
          else
            echo "::notice::没有需要更新的数据"
          fi

          # Set outputs for summary step
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_OUTPUT
          echo "OPEN_COUNT=$OPEN_COUNT" >> $GITHUB_OUTPUT
          echo "DEVICE_MODEL=$DEVICE_MODEL" >> $GITHUB_OUTPUT
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_OUTPUT
          echo "CITY=$CITY" >> $GITHUB_OUTPUT
          echo "REGION=$REGION" >> $GITHUB_OUTPUT
          echo "COUNTRY=$COUNTRY" >> $GITHUB_OUTPUT
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "IP_TYPE=$IP_TYPE" >> $GITHUB_OUTPUT
          echo "REPORT_TIME=$REPORT_TIME" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "TIMEZONE=$TIMEZONE" >> $GITHUB_OUTPUT
          echo "ISP=$ISP" >> $GITHUB_OUTPUT
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Create summary
        run: |
          echo "## 📈 设备统计更新" >> $GITHUB_STEP_SUMMARY
          echo "- **设备ID**: ${{ steps.process-stats.outputs.DEVICE_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **打开次数**: ${{ steps.process-stats.outputs.OPEN_COUNT }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **设备型号**: ${{ steps.process-stats.outputs.DEVICE_MODEL }} (Android ${{ steps.process-stats.outputs.ANDROID_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- **制造商**: ${{ steps.process-stats.outputs.MANUFACTURER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **应用版本**: ${{ steps.process-stats.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **位置**: ${{ steps.process-stats.outputs.CITY }}市, ${{ steps.process-stats.outputs.REGION }}, ${{ steps.process-stats.outputs.COUNTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **IP地址**: ${{ steps.process-stats.outputs.IP_ADDRESS }} (${{ steps.process-stats.outputs.IP_TYPE }})" >> $GITHUB_STEP_SUMMARY
          echo "- **上报时间**: ${{ steps.process-stats.outputs.REPORT_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **当前时间**: ${{ steps.process-stats.outputs.CURRENT_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **时区**: ${{ steps.process-stats.outputs.TIMEZONE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **运营商**: ${{ steps.process-stats.outputs.ISP }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "![位置地图](https://maps.googleapis.com/maps/api/staticmap?center=${{ steps.process-stats.outputs.CITY }}&zoom=10&size=600x300&maptype=roadmap&markers=color:red%7C${{ steps.process-stats.outputs.CITY }}&key=${{ secrets.GOOGLE_MAPS_API_KEY }})" >> $GITHUB_STEP_SUMMARY

      - name: Close issue
        if: always()  # 确保即使前面的步骤失败也会尝试关闭issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.process-stats.outputs.ISSUE_NUMBER }};
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              console.log(`Successfully closed issue #${issueNumber}`);
            } catch (error) {
              console.error(`Error closing issue: ${error}`);
              // 不抛出错误，避免工作流失败
            }
