name: Process Device Stats

on:
  issues:
    types: [opened]

jobs:
  process-device-stats:
    if: contains(github.event.issue.labels.*.name, 'device_stats')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write  # ÈúÄË¶ÅÂçáÁ∫ß‰∏∫writeÊùÉÈôêÊâçËÉΩ‰øÆÊîπ/ÂÖ≥Èó≠issue
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up jq
        run: sudo apt-get install -y jq

      - name: Process stats data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -eo pipefail

          # ÂÆâÂÖ®ËÆæÁΩÆGitÈÖçÁΩÆ
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory /github/workspace

          # ÊèêÂèñÂπ∂È™åËØÅIssueÊï∞ÊçÆ
          TITLE="${{ github.event.issue.title }}"
          BODY=$(echo '${{ toJson(github.event.issue.body) }}' | jq -r '.')

          # È™åËØÅÊ†áÈ¢òÊ†ºÂºè
          if ! [[ "$TITLE" =~ ^DeviceStats\ -\ [0-9]{4}-[0-9]{2}-[0-9]{2}\ - ]]; then
            echo "::error::Invalid issue title format: $TITLE"
            exit 1
          fi

          # Ëß£ÊûêJSONÊï∞ÊçÆ
          if ! DEVICE_ID=$(echo "$BODY" | jq -r '.device_id'); then
            echo "::error::Failed to parse device_id"
            exit 1
          fi

          DATE=$(echo "$BODY" | jq -r '.date')
          OPEN_COUNT=$(echo "$BODY" | jq -r '.open_count')
          REPORT_TIME=$(echo "$BODY" | jq -r '.report_time')
          DEVICE_MODEL=$(echo "$BODY" | jq -r '.device_model')
          ANDROID_VERSION=$(echo "$BODY" | jq -r '.android_version')
          MANUFACTURER=$(echo "$BODY" | jq -r '.manufacturer')
          SDK_VERSION=$(echo "$BODY" | jq -r '.sdk_version')

          # È™åËØÅÂøÖÈúÄÂ≠óÊÆµ
          REQUIRED_FIELDS=("$DEVICE_ID" "$DATE" "$OPEN_COUNT")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if [[ -z "$field" ]]; then
              echo "::error::Missing required field in body"
              exit 1
            fi
          done

          # ÂáÜÂ§áCSVÊñá‰ª∂
          CSV_FILE="stats/device_stats.csv"
          mkdir -p stats
          if [ ! -f "$CSV_FILE" ]; then
            echo "date,device_id,open_count,report_time,device_model,android_version,manufacturer,sdk_version" > "$CSV_FILE"
          fi

          # Êõ¥Êñ∞ËÆ∞ÂΩïÔºàÂéüÂ≠êÊìç‰ΩúÔºâ- ÊîπËøõÁöÑËÆæÂ§áIDÂåπÈÖç
          TEMP_FILE=$(mktemp)
          {
            # ‰ΩøÁî®awkÁ≤æÁ°ÆÂåπÈÖçdevice_idÂ≠óÊÆµÔºàÁ¨¨2ÂàóÔºâ
            awk -v device_id="$DEVICE_ID" -F, '
              BEGIN { OFS=FS }
              NR==1 { print; next }
              $2 != "\""device_id"\"" { print }
            ' "$CSV_FILE"
            # Ê∑ªÂä†Êñ∞ËÆ∞ÂΩï
            echo "\"$DATE\",\"$DEVICE_ID\",$OPEN_COUNT,\"$REPORT_TIME\",\"$DEVICE_MODEL\",\"$ANDROID_VERSION\",\"$MANUFACTURER\",$SDK_VERSION"
          } > "$TEMP_FILE" && mv "$TEMP_FILE" "$CSV_FILE"

          # Êèê‰∫§Êõ¥Êîπ
          git add "$CSV_FILE"
          if ! git diff-index --quiet HEAD --; then
            git commit -m "üìä Update stats for device $DEVICE_ID"
            git push origin HEAD:main
          else
            echo "No changes to commit"
          fi

      - name: Create summary
        run: |
          echo "## üìà Device Stats Updated" >> $GITHUB_STEP_SUMMARY
          echo "- Processed data for device: $DEVICE_ID" >> $GITHUB_STEP_SUMMARY
          echo "- Open count: $OPEN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Device model: $DEVICE_MODEL" >> $GITHUB_STEP_SUMMARY

      - name: Clean and close issue
        if: always()  # Á°Æ‰øùÂç≥‰ΩøÂâçÈù¢Ê≠•È™§Â§±Ë¥•‰πü‰ºöÊâßË°å
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ê∏ÖÁ©∫Âπ∂ÂÖ≥Èó≠issue
          curl -s \
            -X PATCH \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
            -d '{
              "title": "[Processed] Device Stats - $DEVICE_ID",
              "body": "This issue has been automatically processed and closed.\n\n" +
                      "**Processed Data**:\n" +
                      "- Device ID: $DEVICE_ID\n" +
                      "- Processed at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "state": "closed"
            }'
          echo "Issue #${{ github.event.issue.number }} has been cleaned and closed"
