name: Process Device Stats

on:
  issues:
    types: [opened]

jobs:
  process-device-stats:
    if: contains(github.event.issue.labels.*.name, 'device_stats')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up jq
        run: sudo apt-get install -y jq

      - name: Process stats data
        id: process-stats
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -eo pipefail

          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory /github/workspace

          # Extract and validate issue data
          TITLE="${{ github.event.issue.title }}"
          BODY=$(echo '${{ toJson(github.event.issue.body) }}' | jq -r '.')

          # Validate title format
          if ! [[ "$TITLE" =~ ^DeviceStats ]]; then
            echo "::error::Invalid issue title format: $TITLE"
            exit 1
          fi

          # Parse JSON data with error handling
          parse_field() {
            local field_name="$1"
            local value
            if ! value=$(echo "$BODY" | jq -r ".${field_name}"); then
              echo "::error::Failed to parse ${field_name}"
              exit 1
            fi
            echo "$value"
          }

          # Extract all fields
          DEVICE_ID=$(parse_field "device_id")
          DATE=$(parse_field "date")
          OPEN_COUNT=$(parse_field "open_count")
          REPORT_TIME=$(parse_field "report_time")
          DEVICE_MODEL=$(parse_field "device_model")
          ANDROID_VERSION=$(parse_field "android_version")
          MANUFACTURER=$(parse_field "manufacturer")
          SDK_VERSION=$(parse_field "sdk_version")
          VERSION=$(parse_field "version")
          IP_ADDRESS=$(parse_field "ip_address")
          COUNTRY=$(parse_field "country")
          COUNTRY_CODE=$(parse_field "country_code")
          REGION=$(parse_field "region")
          CITY=$(parse_field "city")
          LATITUDE=$(parse_field "latitude")
          LONGITUDE=$(parse_field "longitude")
          TIMEZONE=$(parse_field "timezone")
          ISP=$(parse_field "isp")

          # Validate required fields
          REQUIRED_FIELDS=("$DEVICE_ID" "$DATE" "$OPEN_COUNT")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if [[ -z "$field" || "$field" == "null" ]]; then
              echo "::error::Missing required field: $field"
              exit 1
            fi
          done

          # Prepare CSV directory and file
          CSV_DIR="stats"
          CSV_FILE="${CSV_DIR}/device_stats.csv"
          mkdir -p "$CSV_DIR"

          # Create CSV header if file doesn't exist
          if [ ! -f "$CSV_FILE" ]; then
            echo "date,device_id,open_count,report_time,device_model,android_version,manufacturer,sdk_version,version,ip_address,country,country_code,region,city,latitude,longitude,timezone,isp" > "$CSV_FILE"
          fi

          # Process CSV data
          TEMP_FILE=$(mktemp)
          {
            # Keep header
            head -n 1 "$CSV_FILE"
            
            # Filter out existing entry for this device (if any)
            awk -F, -v device_id="$DEVICE_ID" '
              NR > 1 && $2 != "\""device_id"\"" { print }
            ' "$CSV_FILE"
            
            # Add new record with all fields
            echo "\"$DATE\",\"$DEVICE_ID\",$OPEN_COUNT,\"$REPORT_TIME\",\"$DEVICE_MODEL\",\"$ANDROID_VERSION\",\"$MANUFACTURER\",$SDK_VERSION,\"$VERSION\",\"$IP_ADDRESS\",\"$COUNTRY\",\"$COUNTRY_CODE\",\"$REGION\",\"$CITY\",$LATITUDE,$LONGITUDE,\"$TIMEZONE\",\"$ISP\"" >> "$TEMP_FILE"
            } > "$TEMP_FILE" && mv "$TEMP_FILE" "$CSV_FILE"

          # Commit changes
          git add "$CSV_FILE"
          if ! git diff-index --quiet HEAD --; then
            git commit -m "ðŸ“Š Update stats for device $DEVICE_ID"
            git push origin HEAD:main
            echo "::notice::Stats updated for device $DEVICE_ID"
          else
            echo "::notice::No changes to commit"
          fi

          # Set outputs for summary step
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_OUTPUT
          echo "OPEN_COUNT=$OPEN_COUNT" >> $GITHUB_OUTPUT
          echo "DEVICE_MODEL=$DEVICE_MODEL" >> $GITHUB_OUTPUT
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_OUTPUT
          echo "CITY=$CITY" >> $GITHUB_OUTPUT
          echo "REGION=$REGION" >> $GITHUB_OUTPUT
          echo "COUNTRY=$COUNTRY" >> $GITHUB_OUTPUT
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "REPORT_TIME=$REPORT_TIME" >> $GITHUB_OUTPUT
          echo "LATITUDE=$LATITUDE" >> $GITHUB_OUTPUT
          echo "LONGITUDE=$LONGITUDE" >> $GITHUB_OUTPUT
          echo "ISP=$ISP" >> $GITHUB_OUTPUT

      - name: Create summary
        run: |
          echo "## ðŸ“ˆ Device Stats Updated" >> $GITHUB_STEP_SUMMARY
          echo "- **Device ID**: ${{ steps.process-stats.outputs.DEVICE_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Open count**: ${{ steps.process-stats.outputs.OPEN_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Device model**: ${{ steps.process-stats.outputs.DEVICE_MODEL }} (${{ steps.process-stats.outputs.ANDROID_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Location**: ${{ steps.process-stats.outputs.CITY }}, ${{ steps.process-stats.outputs.REGION }}, ${{ steps.process-stats.outputs.COUNTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coordinates**: ${{ steps.process-stats.outputs.LATITUDE }}, ${{ steps.process-stats.outputs.LONGITUDE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **IP**: ${{ steps.process-stats.outputs.IP_ADDRESS }} (${{ steps.process-stats.outputs.ISP }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Report time**: ${{ steps.process-stats.outputs.REPORT_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "![Location Map](https://maps.googleapis.com/maps/api/staticmap?center=${{ steps.process-stats.outputs.LATITUDE }},${{ steps.process-stats.outputs.LONGITUDE }}&zoom=8&size=600x300&maptype=roadmap&markers=color:red%7C${{ steps.process-stats.outputs.LATITUDE }},${{ steps.process-stats.outputs.LONGITUDE }})" >> $GITHUB_STEP_SUMMARY
